---
title: "Economy & Labour Market"
author: "Sawyer Phinney"
date: last-modified
date-format: "DD/MM/YYYY"
format: 
  html:
    grid:
      sidebar-width: 200px
      body-width: 1000px
      margin-width: 200px
      gutter-width: 1.5rem
    code-fold: true
    toc: true
    toc-location: left
    number-sections: true
    theme: flatly
    highlight-style: tango
    fontfamily: "Arial"
    fontsize: 12pt
    css: style.css
editor: visual
---

```{r include = FALSE}
## Dependencies

#| warning: false
#| message: false
# data manipulation
library(tidyverse)
# plot design / placement
library(patchwork)
library(ggfortify)
# time series modelling
library(forecast)
library(tseries)
library(dplyr)
library(sf)
library(readr)
library(readxl)
library(scales)
library(DataCombine)
library(data.table)
library(plyr)
library(collapse)
library(stats)
library(ggplot2)
library(plotly)
library(fontawesome)
library(htmltools)
library(httr)
library(lubridate)
library(readr)
library(base)

        

```

```{r echo=FALSE, message=FALSE, warning=FALSE}

# Create a function to generate the arrow icon
generate_arrow_icon <- function(Percent_Increase) {
  if (Percent_Increase > 0) {
    icon = fa_i("circle-arrow-up", color="#008000", class="fa-1x text-success")
  } else {
    icon = fa_i("circle-arrow-down", color="#FF0000", class="fa-1x text-danger")
  }
  html_icon = htmltools::tagList(icon)
  return(html_icon)
}

```

<br>

::: logo
![](LCR_map.jpg)
:::

```{r echo=FALSE, message=FALSE, warning=FALSE}


####this is important!!! and was used to take API link of Business Count Data in NOMIS.

#Read the data from the URL
data <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_142_1.data.csv?geography=1853882372&industry=163577857...163577874&employment_sizeband=0&legal_status=0&measures=20100&select=date_name,industry_name,obs_value")


# Start with name the columns to match the original order
colnames(data) <- c("DATE_NAME", "INDUSTRY_NAME", "OBS_VALUE")

# Convert OBS_VALUE to numeric
data$OBS_VALUE <- as.numeric(data$OBS_VALUE)

# Sort the dataframe by DATE_NAME
data <- data %>%
  arrange(DATE_NAME)


# Filter data for the year 2022
data_2022 <- subset(data, DATE_NAME == 2022)

# Calculate the total number of businesses and round it to nearest whole number
BusinessCount <- round(sum(data_2022$OBS_VALUE, na.rm = TRUE))  # 'na.rm = TRUE' to remove any NA values before summing

# Convert to a whole number and avoid scientific notation
BusinessCount <- format(BusinessCount, scientific = FALSE, big.mark = ",")

# Calculate the maximum OBS_VALUE for each INDUSTRY_NAME
max_value <- max(data_2022$OBS_VALUE)

max_value <- format(max_value, scientific = FALSE, big.mark = ",")


# Get the name of the INDUSTRY_NAME with the maximum OBS_VALUE
industry_max <- data %>%
  filter(OBS_VALUE == max(OBS_VALUE)) %>%
  select(INDUSTRY_NAME) %>%
  .[[1]]



```

```{r message=FALSE, warning=FALSE, include=FALSE}



business_change21 <- subset(data, DATE_NAME == 2021)
business_change22 <- subset(data, DATE_NAME == 2022)



# Calculate the total number of businesses in each year and round it to nearest whole number
Business2021 <- sum(business_change21$OBS_VALUE, na.rm = TRUE)
Business2022 <- sum(business_change22$OBS_VALUE, na.rm = TRUE)



# Convert to a whole number and avoid scientific notation
Business2021 <- format(Business2021, scientific = FALSE)
Business2022 <- format(Business2022, scientific = FALSE)

Business2021 <- as.numeric(Business2021)
Business2022 <- as.numeric(Business2022)

# Calculate the percentage increase
BusinessChange <- ((Business2022 - Business2021)/(Business2021))*100

Percent_Increase <- BusinessChange

Percent_Increase <- as.numeric(Percent_Increase)

Percent_Increase <- round(Percent_Increase, 1)

# Generate the arrow icon
html_icon = generate_arrow_icon(Percent_Increase)


```

# The Economy
<br>

```{r echo=FALSE, message=FALSE, warning=FALSE}


Total_Bus <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_142_1.data.csv?geography=1853882372&industry=37748736&employment_sizeband=0&legal_status=0&measures=20100&select=date_name,obs_value")

# Rename the columns after filtering
colnames(Total_Bus) <- c("DATE_NAME", "OBS_VALUE")

# Convert DATE_NAME to factor and set levels in desired order
Total_Bus$DATE_NAME <- factor(Total_Bus$DATE_NAME, levels = unique(Total_Bus$DATE_NAME))


# Convert OBS_VALUE to numeric
Total_Bus$OBS_VALUE <- as.numeric(Total_Bus$OBS_VALUE)


# Plot the data
plot_ly(Total_Bus, x = ~DATE_NAME, y = ~OBS_VALUE, type = "scatter", mode = "lines", line = list(width = 5, color = "lightblue")) %>%
  
  
  layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
    title = list(text = "Total Number of Businesses in Liverpool City Region, 2010-2022", font = list(color = "darkgrey", family = "Arial"),
    showlegend = FALSE,
    autosize = TRUE,
    margin = list(l = 80, r = 80, t = 80, b = 80),
    width = 800,
    height = 500
  ))




```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

As of March 2023, there was estimated to be around **`r BusinessCount`** registered businesses in LCR. This represents a decrease by **`r Percent_Increase`**% `r html_icon` from the previous year. Compared with the previous decade, this figure was up by 28% or 11,700. 

Knowsley saw the largest increase in businesses during this period (+37%) and the lowest being in Sefton (+18%). However, all local authorities experienced a significant increase in the number of businesses.

The profile of businesses by size is slightly different than the national picture. There are less micro-sized businesses in LCR, and more medium and large-sized businesses than the England average. Small and medium-sized enterprises account for 99.4% of businesses. Medium and large-sized businesses are more prevalent in LCR than across England. .
:::

<br> <br> <br>

```{r echo=FALSE, message=FALSE, warning=FALSE}


# Assuming your dataset is called "data" and you want to change the column name "OBS_VALUE" to "FirmsCount"



# Create a line graph using Plotly with multiple lines based on the "Industry" column
plot_ly(data, x = ~DATE_NAME, y = ~OBS_VALUE, split = ~INDUSTRY_NAME, type = "scatter", mode = "lines", line=list(width=5)) %>%


layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Number of Businesses in Liverpool City Region by Industry</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))







```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

In 2023, the **`r industry_max`** sector had the highest numbers of businesses in Liverpool City Region with **`r max_value`** businesses in the city region.

Since 2019, there has been a slight decrease in the number of businesses in scientific, technical & professional services. However, it has remained the highest sector since 2010 in terms of number of firms.
:::

<br> <br> <br>

```{r calculate, include=FALSE}

#this is to calculate GVA changes 


# Read the data from the Excel file
Deflator_Data <- read_excel("C:/Users/sawye/OneDrive/R Dashboard/ONS_DeflatorD.xlsx")

# Convert DATE_NAME to factor and set levels in desired order
Deflator_Data$DATE_D <- factor(Deflator_Data$DATE_D, levels = unique(Deflator_Data$DATE_D))

# Convert OBS_VALUE to numeric
Deflator_Data$GVA<- as.numeric(Deflator_Data$GVA)

# Round the values in the GVA column
Deflator_Data$GVA <- round(Deflator_Data$GVA)

# Calculate the percentage change in GVA from 2020 to 2021
change_gva <- (Deflator_Data$GVA[Deflator_Data$DATE_D == "2021"] - Deflator_Data$GVA[Deflator_Data$DATE_D == "2020"]) / Deflator_Data$GVA[Deflator_Data$DATE_D == "2020"] * 100



```

```{r echo=FALSE, message=FALSE, warning=FALSE}


###GVA Data and Analysis 



Deflator_Data <- read_excel("C:/Users/sawye/OneDrive/R Dashboard/ONS_DeflatorD.xlsx")


# Convert DATE_NAME to factor and set levels in desired order
Deflator_Data$DATE_D <- factor(Deflator_Data$DATE_D, levels = unique(Deflator_Data$DATE_D))

# Convert OBS_VALUE to numeric
Deflator_Data$Real_GVA<- as.numeric(Deflator_Data$Real_GVA)



#calculate 2020 value
GVA_2020 <- subset(Deflator_Data, DATE_D == "2020")
GVA_2020F <- sum(GVA_2020$Real_GVA)
# Convert to a whole number and avoid scientific notation
GVA_2020T <- format(GVA_2020F, scientific = FALSE, big.mark = ",")

#calculate 2021 value
GVA_2021a <- subset(Deflator_Data, DATE_D == "2021")
GVA_2021F <- sum(GVA_2021a$Real_GVA)
# Convert to a whole number and avoid scientific notation
GVA_2021T <- format(GVA_2021F, scientific = FALSE, big.mark = ",")

#Calculate percent change since 2020
GVA_2020S <- as.numeric(GVA_2020T)
GVA_2021S <- as.numeric(GVA_2021T)

change_gva1 <- (GVA_2021S-GVA_2020S)/GVA_2020S

Percent_Increase <- percent(change_gva1, accuracy = 0.1)

# Generate the arrow icon
html_icon = generate_arrow_icon(Percent_Increase)


#calculate total gva in 2021

realgva_2021 <- GVA_2021F*100000 
gva_20231 <- format(realgva_2021, scientific = FALSE, big.mark = ",")


# Plot real GVA
plot_ly(Deflator_Data, x = ~DATE_D, y = ~GVA, type = "scatter", mode = "lines", line = list(color = "lightblue", width = 5)) %>%
  
  
  layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Real Gross Value Added (GVA) in LCR (in £ Millions)</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))



```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

Latest data shows the real GVA (adjusted for inflation) in Liverpool City Region was **£`r gva_20231`**. This represents an increase of **`r Percent_Increase`** `r html_icon` from the previous year.
:::

<br> <br> <br>

# Labour Market Update

```{r echo=FALSE, message=FALSE, warning=FALSE}


Data_U <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_17_5.data.csv?geography=1853882372,2092957699&variable=84&measures=20599,21001,21002,21003&select=date_name,geography_name,measures_name,obs_value")

# Rename the columns
colnames(Data_U) <- c("DATE_NAME", "GEOGRAPHY_NAME", "MEASURES_NAME", "OBS_VALUE")

# Convert OBS_VALUE to numeric
Data_U$OBS_VALUE <- as.numeric(Data_U$OBS_VALUE)

# Filter the dataframe to include only rows where MEASURES_NAME contains "Variable"
Data_U <- Data_U %>%
  filter(grepl('Variable', MEASURES_NAME))

# Convert DATE_NAME to factor and set levels in desired order
Data_U$DATE_NAME <- factor(Data_U$DATE_NAME, levels = unique(Data_U$DATE_NAME))



#calculate the last 2023 value
emp_latest <- subset(Data_U, DATE_NAME == "Oct 2022-Sep 2023")
emp_latestF <- sum(emp_latest$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
emp_latestT <- format(emp_latestF, scientific = FALSE, big.mark = ",")

#calculate previous quartely value 
emp_quart <- subset(Data_U, DATE_NAME == "Jul 2022-Jun 2023")
emp_quartF <- sum(emp_quart$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
emp_quartT <- format(emp_quartF, scientific = FALSE, big.mark = ",")

#Calculate percent change from previous quarter
latest_emp <- as.numeric(emp_latestT)
quart_emp <- as.numeric(emp_quartT)

change_emp1 <- (latest_emp-quart_emp)/quart_emp


Percent_Increase <- percent(change_emp1, accuracy = 0.1)

# Generate the arrow icon
html_icon = generate_arrow_icon(Percent_Increase)

plot_ly(Data_U, x = ~DATE_NAME, y = ~OBS_VALUE, type = "scatter", 
mode = "lines",
color = ~GEOGRAPHY_NAME, colors = c("grey", "lightblue"),
        line = list(width = 5)) %>%
 layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Unemployment Rate (in %)</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))
  

```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

The unemployment rate in Liverpool City Region is **`r latest_emp`%**. This represents an increase of **`r Percent_Increase`**`r html_icon` from the previous quarter.
:::

<br> <br> <br>

```{r echo=FALSE, message=FALSE, warning=FALSE}



Data_I <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_17_5.data.csv?geography=1853882372,2092957699&variable=120,129&measures=20599,21001,21002,21003&select=date_name,geography_name,variable_name,measures_name,obs_value")

# Start with name the columns to match the original order
colnames(Data_I) <- c("DATE_NAME", "GEOGRAPHY_NAME", "VARIABLE_NAME", "MEASURES_NAME", "OBS_VALUE")

# Convert OBS_VALUE to numeric
Data_I$OBS_VALUE <- as.numeric(Data_I$OBS_VALUE)

# Filter the dataframe to include only rows where MEASURES_NAME contains "Variable"
Data_I <- Data_I %>%
  filter(grepl('Variable', MEASURES_NAME))

# Sort the dataframe by DATE_NAME
Data_I <- Data_I %>%
  arrange(DATE_NAME)

Data_I <- Data_I %>%
  mutate(VARIABLE_NAME = case_when(
    VARIABLE_NAME == "% of  males who are economically inactive - aged 16-64" ~ "Males",
    VARIABLE_NAME == "% of females who are economically inactive - aged 16-64" ~ "Females",
    TRUE ~ VARIABLE_NAME
  ))



# Create a new column that combines the GEOGRAPHY_NAME and VARIABLE_NAME (actually dont need this anymore now that I'm using add trace fucntion. However can still use this code for other things when wanting to cmbined more than two variables from different columns)
Data_I <- Data_I %>%
  mutate(GROUP_NAME = paste(GEOGRAPHY_NAME, VARIABLE_NAME, sep = " - "))




#calculate the last 2023 value for MALES//
inemp_latest1 <- subset(Data_I, DATE_NAME == "Oct 2022-Sep 2023")
inemp_latest2 <- subset(inemp_latest1, VARIABLE_NAME == "Males")
inemp_latest <- subset(inemp_latest2, GEOGRAPHY_NAME == "Liverpool City Region")
inemp_latestF <- sum(inemp_latest$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
inemp_latestT <- format(inemp_latestF, scientific = FALSE, big.mark = ",")

#calculate the last 2023 value for FEMALES//
Finemp_latest1 <- subset(Data_I, DATE_NAME == "Oct 2022-Sep 2023")
Finemp_latest2 <- subset(Finemp_latest1, VARIABLE_NAME == "Females")
Finemp_latest <- subset(Finemp_latest2, GEOGRAPHY_NAME == "Liverpool City Region")
Finemp_latestF <- sum(Finemp_latest$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
Finemp_latestT <- format(Finemp_latestF, scientific = FALSE, big.mark = ",")


#Calculate percent change for MALES and FEMALES
latest_inemp <- as.numeric(inemp_latestT)
#Calculate percent change for MALES and FEMALES
latest_Finemp <- as.numeric(Finemp_latestT)


##///Previous Quarter Change
#calculate the previous quarter value for MALES//
Preinemp_latest1 <- subset(Data_I, DATE_NAME == "Oct 2021-Sep 2022")
Preinemp_latest2 <- subset(Preinemp_latest1, VARIABLE_NAME == "Males")
Preinemp_latest <- subset(Preinemp_latest2, GEOGRAPHY_NAME == "Liverpool City Region")
Preinemp_latestF <- sum(Preinemp_latest$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
Preinemp_latestT <- format(Preinemp_latestF, scientific = FALSE, big.mark = ",")



#calculate the previous quarter value for FEMALES//
PreFinemp_latest1 <- subset(Data_I, DATE_NAME == "Oct 2021-Sep 2022")
PreFinemp_latest2 <- subset(PreFinemp_latest1, VARIABLE_NAME == "Females")
PreFinemp_latest <- subset(PreFinemp_latest2, GEOGRAPHY_NAME == "Liverpool City Region")
PreFinemp_latestF <- sum(PreFinemp_latest$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
PreFinemp_latestT <- format(PreFinemp_latestF, scientific = FALSE, big.mark = ",")



#Calculate percent change for MALES and FEMALES
Prelatest_inemp <- as.numeric(Preinemp_latestT)
#Calculate percent change for MALES and FEMALES
Prelatest_Finemp <- as.numeric(PreFinemp_latestT)



#chnage for MALES
change_inemp1 <- (latest_inemp-Prelatest_inemp)/Prelatest_inemp

change_inemp <- percent(change_inemp1, accuracy = 0.1)




#Chnage for FEMALES
change_Finemp1 <- (latest_Finemp-Prelatest_Finemp)/Prelatest_Finemp

change_Finemp <- percent(change_Finemp1, accuracy = 0.1)





# Create an empty plot
p <- plot_ly()

# Add the line for England Males
p <- add_trace(p, x = Data_I$DATE_NAME[Data_I$GEOGRAPHY_NAME == "England" & Data_I$VARIABLE_NAME == "Males"],
               y = Data_I$OBS_VALUE[Data_I$GEOGRAPHY_NAME == "England" & Data_I$VARIABLE_NAME == "Males"],
               type = "scatter", mode = "lines", name = "England Males",
               line = list(width = 5, color = "grey"))

# Add the line for England Females
p <- add_trace(p, x = Data_I$DATE_NAME[Data_I$GEOGRAPHY_NAME == "England" & Data_I$VARIABLE_NAME == "Females"],
               y = Data_I$OBS_VALUE[Data_I$GEOGRAPHY_NAME == "England" & Data_I$VARIABLE_NAME == "Females"],
               type = "scatter", mode = "lines", name = "England Females",
               line = list(width = 5, color = "grey", dash = 'dot'))

# Add the line for Liverpool Males
p <- add_trace(p, x = Data_I$DATE_NAME[Data_I$GEOGRAPHY_NAME == "Liverpool City Region" & Data_I$VARIABLE_NAME == "Males"],
               y = Data_I$OBS_VALUE[Data_I$GEOGRAPHY_NAME == "Liverpool City Region" & Data_I$VARIABLE_NAME == "Males"],
               type = "scatter", mode = "lines", name = "Liverpool Males",
               line = list( width = 5, color = "lightblue"))

# Add the line for Liverpool Females
p <- add_trace(p, x = Data_I$DATE_NAME[Data_I$GEOGRAPHY_NAME == "Liverpool City Region" & Data_I$VARIABLE_NAME == "Females"],
               y = Data_I$OBS_VALUE[Data_I$GEOGRAPHY_NAME == "Liverpool City Region" & Data_I$VARIABLE_NAME == "Females"],
               type = "scatter", mode = "lines", name = "Liverpool Females",
               line = list(width = 5, color = "lightblue", dash = 'dot'))

# Apply layout options to the plot
p <- p %>%

layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Inactivity Rate by Gender</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))
  
p

```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

The inactivity rate in Liverpool City Region for is **`r inemp_latestT`%** for males and **`r Finemp_latestT`%** for females.

This represents a decrease of **`r change_inemp`** for males and **`r change_Finemp`** decrease for females from the previous year.
:::

<br> <br> <br>

```{r echo=FALSE, message=FALSE, warning=FALSE}



Earnings <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_30_1.data.csv?geography=1925185554&date=latestMINUS8-latest&sex=8&item=2&pay=1&measures=20100,20701&select=date_name,measures_name,obs_value")

# Rename the columns
colnames(Earnings) <- c("DATE_NAME", "MEASURES_NAME", "OBS_VALUE")

# Filter the dataframe to include only rows where MEASURES_NAME contains "Variable"
Earnings <- Earnings %>%
  filter(grepl("Value", MEASURES_NAME))

# Rename the columns after filtering
colnames(Earnings) <- c("DATE_NAME", "MEASURES_NAME", "OBS_VALUE")

# Convert DATE_NAME to factor and set levels in desired order
Earnings$DATE_NAME <- factor(Earnings$DATE_NAME, levels = unique(Earnings$DATE_NAME))

# Convert OBS_VALUE to numeric
Earnings$OBS_VALUE <- as.numeric(Earnings$OBS_VALUE)


# Plot the data
plot_ly(Earnings, x = ~DATE_NAME, y = ~OBS_VALUE, type = "scatter", mode = "lines", line = list(width = 5, color = "lightblue")) %>%
  layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Median Gross Weekly Earnings in Liverpool City Region</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))


```

<br> <br> <br>

```{r echo=FALSE, message=FALSE, warning=FALSE}

#Nomis APS using Employees (not employment)
Employment <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_189_1.data.csv?geography=1853882372&industry=37748736&employment_status=1&measure=1&measures=20100&select=date_name,obs_value")

# Rename the columns after filtering
colnames(Employment) <- c("DATE_NAME", "OBS_VALUE")

# Convert DATE_NAME to factor and set levels in desired order
Employment$DATE_NAME <- as.character(Employment$DATE_NAME)

#calculate the total number of workers in 2022//
total_workers <- subset(Employment, DATE_NAME == "2022")
total_workersF <- sum(total_workers$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
total_workersT <- format(total_workersF, scientific = FALSE, big.mark = ",")

#calculate the total number of workers in 2021//
total_workers2 <- subset(Employment, DATE_NAME == "2015")
total_workers2F <- sum(total_workers2$OBS_VALUE)
# Convert to a whole number and avoid scientific notation
total_workers2T <- format(total_workers2F, scientific = FALSE, big.mark = ",")


#Chnage from 2022 to 2023
change_workers1 <- (total_workersF-total_workers2F)/total_workers2F

Percent_Increase <- percent(change_workers1, accuracy = 0.1)

# Generate the arrow icon
html_icon = generate_arrow_icon(Percent_Increase)



# Plot the data
plot_ly(Employment, x = ~DATE_NAME, y = ~OBS_VALUE, type = "scatter", mode = "lines", line = list(width = 5, color = "lightblue")) %>%
  layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Total Number of Workers in Liverpool City Region</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))


```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

The number of workers in Liverpool City Region for is **`r total_workersT`**. This represents an increase of **`r Percent_Increase`** `r html_icon` from 2015.
:::

<br> <br> <br>

```{r echo=FALSE, message=FALSE, warning=FALSE}



Claimant_Data <- read_csv("https://www.nomisweb.co.uk/api/v01/dataset/NM_162_1.data.csv?geography=1807745043,1807745057...1807745061&date=latestMINUS444,latestMINUS432,latestMINUS420,latestMINUS408,latestMINUS396,latestMINUS384,latestMINUS372,latestMINUS360,latestMINUS348,latestMINUS336,latestMINUS324,latestMINUS312,latestMINUS300,latestMINUS288,latestMINUS276,latestMINUS264,latestMINUS252,latestMINUS240,latestMINUS228,latestMINUS216,latestMINUS204,latestMINUS192,latestMINUS180,latestMINUS168,latestMINUS156,latestMINUS144,latestMINUS132,latestMINUS120,latestMINUS108,latestMINUS96,latestMINUS84,latestMINUS72,latestMINUS60,latestMINUS48,latestMINUS36,latestMINUS24,latestMINUS12,latest&gender=0&age=0&measure=1&measures=20100&select=date_name,geography_name,obs_value")


# Rename the columns
colnames(Claimant_Data) <- c("DATE_NAME", "GEOGRAPHY_NAME", "OBS_VALUE")

# Convert DATE_NAME to factor and set levels in desired order
Claimant_Data$DATE_NAME <- factor(Claimant_Data$DATE_NAME, levels = unique(Claimant_Data$DATE_NAME))

# Convert OBS_VALUE to numeric
Claimant_Data$OBS_VALUE <- as.numeric(Claimant_Data$OBS_VALUE)

# Sort the dataframe by GEOGRAPHY_NAME
Claimant_Data <- Claimant_Data %>%
  arrange(GEOGRAPHY_NAME)

# Filter the dataframe to include only rows with year '2023'
LCR_Data <- Claimant_Data %>%
  filter(grepl('2023', DATE_NAME))

LCR_sum <- sum(LCR_Data$OBS_VALUE)

LCR_sum_final <- format(LCR_sum, scientific = FALSE, big.mark = ",")



# Filter the dataframe to include only rows with year '2022'
LCR_Data_old <- Claimant_Data %>%
  filter(grepl('2022', DATE_NAME))

LCR_sum_old <- sum(LCR_Data_old$OBS_VALUE)

LCR_sum_final_old <- format(LCR_sum_old, scientific = FALSE, big.mark = ",")

#Chnage from 2022 to 2023
change_benefit1 <- (LCR_sum-LCR_sum_old)/LCR_sum_old

Percent_Increase <- percent(change_benefit1, accuracy = 0.1)

# Generate the arrow icon
html_icon = generate_arrow_icon(Percent_Increase)


#find max local authroity in 2023
# Get the name of the local authroity with the maximum OBS_VALUE
LA_max <- LCR_Data %>%
  filter(OBS_VALUE == max(OBS_VALUE)) %>%
  select(GEOGRAPHY_NAME) %>%
  .[[1]]


#find min local authority in 2023
# Get the name of the local authority with the minimum OBS_VALUE
LA_min <- LCR_Data %>%
  filter(OBS_VALUE == min(OBS_VALUE)) %>%
  select(GEOGRAPHY_NAME) %>%
  .[[1]]


plot_ly(Claimant_Data, x = ~DATE_NAME, y = ~OBS_VALUE, type = "scatter", 
mode = "lines",
color = ~GEOGRAPHY_NAME,
        line = list(width = 5)) %>%
  layout(xaxis = list(
      title = "", tickfont = list(family='Arial', color="darkgrey", size=12),
      showgrid = FALSE  # Hide vertical gridlines
    ),
    yaxis = list(tickformat = ",.0f", 
      title = "", showgrid = TRUE,  # Display horizontal gridlines
      gridcolor = "lightgray",  # Set the color of the gridlines
      gridwidth = 1,
      tickfont = list(family='Arial', color="darkgrey", size=12)),
        showlegend = FALSE,
        autosize = TRUE,
        title = list(text = "<b>Claimant Count in LCR, by Local Authority</b>", font = list(color = "darkgrey", family = "Arial"),
        margin = list(l = 80, r = 80, t = 80, b = 80),
        width = 800,
        height = 500
  ))


```

<br>

::: {.blackbox data-latex=""}
::: {.data-latex=""}
**Key Trends**
:::

The number of workers claiming benefits in Liverpool City Region in 2023 is **`r LCR_sum_final`**. This represents an increase of **`r Percent_Increase`** `r html_icon` from the previous year. The local authority with the highest rate of residents claiming benefits is **`r LA_max`** and the lowest being **`r LA_min`**.
:::

<br><br>

![](ERI.png){.wide-image}
